@{
    ViewData["title"] = "Calendario";
}
<partial name="_Submenu" model="SubMenuTransaction.Calendar"/>
<h1>Calendario</h1>

<div id="calendar"></div>

<div class="modal fade" id="modalTransactions" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"> Transacciones del dia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" ></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                    <tr>
                        <th id="modalTableDate" colspan="2"></th>
                        <th id="modalTableIncomes" class="asset"></th>
                        <th id="modalTableExpenses" class="liability"></th>
                    </tr>
                    </thead>
                    <tbody id="modalTableBody"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/Fullcalendar/main.min.js"></script>
    
    <script>
        document.addEventListener("DOMContentLoaded",function(){
            const calendarEL= document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEL, {
                dayMaxEventRows:3,
                initialView: 'dayGridMonth',
                events: '/transaction/GetCalendarTransactions',
                dateClick: async function(info){
                    await getTransactionsPerDate(info.dateStr);
                }
            });
            
            calendar.render();
        })
        
        async function getTransactionsPerDate(date){
            const response = await fetch(`/transaction/GetTransactionsPerDate?date=${date}`,{
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const json = await response.json();
            
            let incomes=0;
            let expenses=0;
            const operationTypeIncomes=1;
            
            const formatter = new Intl.NumberFormat('en-US',{
                style: 'currency',
                currency: 'USD'
            });
            console.log(json);
            const rows = json.map(transaction => {
                if(transaction.OperationTypeId === operationTypeIncomes){
                    incomes += transaction.amount;
                }else{
                    expenses += transaction.amount;
                }
                console.log(expenses);
                return `<tr>
                            <td>${transaction.category}</td>
                            <td>${transaction.account}</td>
                            <td align="right" colspan="2" class=${transaction.operationTypeId === operationTypeIncomes ? 'asset' : 'liability'}>
                                ${formatter.format(transaction.amount)}
                            </td>
                        </tr>`;
            })
            
            $("#modalTableBody").html(rows);
            $("#modalTableIncomes").html(formatter.format(incomes));
            $("#modalTableExpenses").html(formatter.format(expenses));
            $("#modalTableDate").html(date);
            
            const modalTransactions = new bootstrap.Modal(document.getElementById('modalTransactions'));
            
            modalTransactions.show();
        }
    </script>
}
